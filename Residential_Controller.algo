SEQUENCE CallElevator (ButtonDirection, PresentFloor)
  CALL ActivateButton (ButtonDirection, PresentFloor)
  CALL FindElevator (ButtonDirection, PresentFloor)
  CALL RequestElevator (Elevator, PresentFloor)
END SEQUENCE

SEQUENCE ActivateButton (ButtonDirection, PresentFloor)
  CALL FindButton (ButtonDirection, PresentFloor) RETURNING Button
  SET Button Active
END SEQUENCE

SEQUENCE FindButton (ButtonDirection, PresentFloor)
  FOR EACH Button IN ButtonsList
    IF PresentFloor = ButtonFloor AND ButtonDirection = ButtonFloorDirection
      THEN RETURN Button
    END IF
  END FOR
END SEQUENCE

SEQUENCE FindElevator (ButtonDirection, PresentFloor)
  WHILE NoElevatorFound
    FOR EACH Elevator IN ElevatorsList
      IF PresentFloor = ElevatorFloor THEN
        IF Status IS Stop AND ElevatorDirection IS ButtonDirection THEN
          RETURN Elevator
        ELSE IF Status IS Idle THEN
          RETURN Elevator
      ELSE IF PresentFloor > ElevatorFloor THEN
        IF Status IS Move AND ElevatorDirection IS GoingUp AND ElevatorDirection IS ButtonDirection AND CALL IsNearestElevator RETURNING TRUE THEN
          RETURN Elevator
        ELSE IF Status IS Idle AND CALL IsNearestElevator RETURNING TRUE THEN
          RETURN Elevator
        ELSE IF Status IS Stop AND ElevatorDirection IS GoingUp AND ElevatorDirection IS ButtonDirection AND CALL IsNearestElevator RETURNING TRUE THEN
          RETURN Elevator
        ELSE IF Status IS Move AND ElevatorDirection IS GoingUp AND ElevatorDirection IS ButtonDirection THEN
          RETURN Elevator
        ELSE IF Status IS Idle THEN
          RETURN Elevator
        ELSE IF Status IS Stop AND ElevatorDirection IS GoingUp AND ElevatorDirection IS ButtonDirection THEN
          RETURN Elevator
        ELSE IF Status IS Move AND ElevatorDirection IS GoingDown AND ElevatorDirection IS NOT ButtonDirection AND CALL IsShortestFloorList RETURNING TRUE THEN
          RETURN ElevatorNumber1
        ELSE IF Status IS Move AND ElevatorDirection IS GoingDown AND ElevatorDirection IS NOT ButtonDirection AND CALL IsShortestFloorList RETURNING FALSE THEN
          RETURN ElevatorNumber2
      ELSE IF PresentFloor < ElevatorFloor THEN
        IF Status IS Move AND ElevatorDirection IS GoingDown AND ElevatorDirection IS ButtonDirection AND CALL IsNearestElevator RETURNING TRUE THEN
          RETURN Elevator
        ELSE IF Status IS Idle AND CALL IsNearestElevator RETURNING TRUE THEN
          RETURN Elevator
        ELSE IF Status IS Stop AND ElevatorDirection IS GoingDown AND ElevatorDirection IS ButtonDirection AND CALL IsNearestElevator RETURNING TRUE THEN
          RETURN Elevator
        ELSE IF Status IS Move AND ElevatorDirection IS GoingDown AND ElevatorDirection IS ButtonDirection THEN
          RETURN Elevator
        ELSE IF Status IS Idle THEN
          RETURN Elevator
        ELSE IF Status IS Stop AND ElevatorDirection IS GoingDown AND ElevatorDirection IS ButtonDirection THEN
          RETURN Elevator
        ELSE IF Status IS Move AND ElevatorDirection IS GoingUp AND ElevatorDirection IS NOT ButtonDirection AND CALL IsShortestFloorList RETURNING TRUE THEN
          RETURN ElevatorNumber1
        ELSE IF Status IS Move AND ElevatorDirection IS GoingUp AND ElevatorDirection IS NOT ButtonDirection AND CALL IsShortestFloorList RETURNING FALSE THEN
          RETURN ElevatorNumber2
      END IF
    END FOR
  END WHILE
END SEQUENCE

SEQUENCE IsNearestElevator (ElevatorFloor, Floor)
  COMPUTE RefGap = |ButtonFloor - Elevator1Floor|
  FOR EACH Elevator IN ElevatorsList
    COMPUTE Gap = |Elevator2Floor - Floor|
    IF RefGap > Gap THEN
      RETURN False
    END IF
  END FOR
  RETURN True
END SEQUENCE

SEQUENCE IsShortestFloorList (FloorList)
  FOR EACH FloorList IN FloorLists
      IF FloorListLength1 > FloorListLength2 THEN
          RETURN FALSE
      ELSE RETURN TRUE
      END IF
  END FOR
END SEQUENCE

SEQUENCE RequestElevator (Elevator, RequestedFloor)
  ADD RequestedFloor TO Floorlist
  CALL SortFloorList (FloorList, ElevatorDirection) RETURNING SortedFloorlist
  CALL OperateElevator
END SEQUENCE

SEQUENCE SortFloorList (FloorList, ElevatorDirection)
  IF ElevatorDirection IS GoingUP THEN
    CALCULATE SortFloorList == FloorList IN Ascending Order
  ELSE IF ElevatorDirection IS GoingDown THEN
    CALCULATE SortFloorList == FloorList IN Descending Order
  END IF
END SEQUENCE

SEQUENCE OperateElevator (Elevator, SortedFloorList)
  READ NextFloor FORM SortedFloorList
  IF ElevatorFloor = NextFloor THEN
    CALL OpenDoor AND DeactivateButton AND DeactivateInsideButton
  IF ElevatorFloor > RequestedFloor THEN
    CALL LevelDown
  IF ElevatorFloor < RequestedFloor THEN
    CALL LevelUp
  END IF
END SEQUENCE

SEQUENCE OpenDoor (Elevator)
  REPEAT
    Open
    INIT Timer TO 5 second
  UNTIL Door NOT Blocked
  CALL CloseDoor (Elevator)
END SEQUENCE

SEQUENCE CloseDoor (Elevator)
  IF Door START Closing AND NOT Blocked
    THEN Close
  ELSE
    CALL OpenDoor (Elevator)
  END IF
END SEQUENCE

SEQUENCE DeactivateButton (ButtonDirection, PresentFloor)
  CALL FindButton (ButtonDirection, PresentFloor) RETURNING Button
  SET Button Inactive
END SEQUENCE

SEQUENCE DeactivateInsideButton (PresentFloor, Elevator)
  IF ElevatorFloor IS PresentFloor THEN
    SET ElevatorButtonFloor Inactive
  END IF
END SEQUENCE

SEQUENCE LevelDown (Elevator)
  REPEAT
    COMPUTE ElevatorFloor - 1
  UNTIL ElevatorFloor = Floor
  CALL OperateElevator (Elevator, Floor)
END SEQUENCE

SEQUENCE LevelUp (Elevator)
  REPEAT
    COMPUTE ElevatorFloor + 1
  UNTIL ElevatorFloor = Floor
  CALL OperateElevator (Elevator, Floor)
END SEQUENCE

SEQUENCE RequestFloor(Elevator, PresentFloor)
   IF(ElevatorDirection IS GoingUp AND PresentFloor > ElevatorFloor) THEN
       CALL RequestElevator AND CALL ActivateInsideButton
   ELSE IF (ElevatorDirection IS GoingDown AND Floor < ElevatorFloor) THEN
       CALL RequestElevator AND CALL ActivateInsideButton
   END IF
END SEQUENCE

SEQUENCE ActivateInsideButton (Elevator, PresentFloor)
  CALL FindElevatorButton (Elevator) RETURNING ElevatorButtonFloor
  SET ElevatorButtonFloor Active
END SEQUENCE

SEQUENCE FindElevatorButton (Elevator)
  FOR EACH ElevatorButton IN ElevatorButtonsList
    IF Elevator = ElevatorButton AND ButtonDirection = ButtonFloorDirection
      THEN RETURN Button
    END IF
  END FOR
END SEQUENCE
